// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.13.0
// source: backend_service.proto

package isp

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//	*Message_StructBody
	//	*Message_ListBody
	//	*Message_NullBody
	//	*Message_BytesBody
	Body isMessage_Body `protobuf_oneof:"body"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_backend_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_backend_service_proto_rawDescGZIP(), []int{0}
}

func (m *Message) GetBody() isMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Message) GetStructBody() *_struct.Struct {
	if x, ok := x.GetBody().(*Message_StructBody); ok {
		return x.StructBody
	}
	return nil
}

func (x *Message) GetListBody() *_struct.ListValue {
	if x, ok := x.GetBody().(*Message_ListBody); ok {
		return x.ListBody
	}
	return nil
}

func (x *Message) GetNullBody() _struct.NullValue {
	if x, ok := x.GetBody().(*Message_NullBody); ok {
		return x.NullBody
	}
	return _struct.NullValue_NULL_VALUE
}

func (x *Message) GetBytesBody() []byte {
	if x, ok := x.GetBody().(*Message_BytesBody); ok {
		return x.BytesBody
	}
	return nil
}

type isMessage_Body interface {
	isMessage_Body()
}

type Message_StructBody struct {
	StructBody *_struct.Struct `protobuf:"bytes,1,opt,name=structBody,proto3,oneof"`
}

type Message_ListBody struct {
	ListBody *_struct.ListValue `protobuf:"bytes,2,opt,name=listBody,proto3,oneof"`
}

type Message_NullBody struct {
	NullBody _struct.NullValue `protobuf:"varint,3,opt,name=NullBody,proto3,enum=google.protobuf.NullValue,oneof"`
}

type Message_BytesBody struct {
	BytesBody []byte `protobuf:"bytes,4,opt,name=BytesBody,proto3,oneof"`
}

func (*Message_StructBody) isMessage_Body() {}

func (*Message_ListBody) isMessage_Body() {}

func (*Message_NullBody) isMessage_Body() {}

func (*Message_BytesBody) isMessage_Body() {}

var File_backend_service_proto protoreflect.FileDescriptor

var file_backend_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x69, 0x73, 0x70, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x01, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x4e,
	0x75, 0x6c, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x4e, 0x75, 0x6c,
	0x6c, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1e, 0x0a, 0x09, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x32, 0x6c, 0x0a,
	0x0e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x2e, 0x69, 0x73, 0x70,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0c, 0x2e, 0x69, 0x73, 0x70, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0c, 0x2e, 0x69, 0x73, 0x70, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0c, 0x2e, 0x69, 0x73, 0x70, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x07, 0x5a, 0x05, 0x2e,
	0x3b, 0x69, 0x73, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_service_proto_rawDescOnce sync.Once
	file_backend_service_proto_rawDescData = file_backend_service_proto_rawDesc
)

func file_backend_service_proto_rawDescGZIP() []byte {
	file_backend_service_proto_rawDescOnce.Do(func() {
		file_backend_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_service_proto_rawDescData)
	})
	return file_backend_service_proto_rawDescData
}

var file_backend_service_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_backend_service_proto_goTypes = []interface{}{
	(*Message)(nil),           // 0: isp.Message
	(*_struct.Struct)(nil),    // 1: google.protobuf.Struct
	(*_struct.ListValue)(nil), // 2: google.protobuf.ListValue
	(_struct.NullValue)(0),    // 3: google.protobuf.NullValue
}
var file_backend_service_proto_depIdxs = []int32{
	1, // 0: isp.Message.structBody:type_name -> google.protobuf.Struct
	2, // 1: isp.Message.listBody:type_name -> google.protobuf.ListValue
	3, // 2: isp.Message.NullBody:type_name -> google.protobuf.NullValue
	0, // 3: isp.BackendService.Request:input_type -> isp.Message
	0, // 4: isp.BackendService.RequestStream:input_type -> isp.Message
	0, // 5: isp.BackendService.Request:output_type -> isp.Message
	0, // 6: isp.BackendService.RequestStream:output_type -> isp.Message
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_backend_service_proto_init() }
func file_backend_service_proto_init() {
	if File_backend_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_backend_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_backend_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Message_StructBody)(nil),
		(*Message_ListBody)(nil),
		(*Message_NullBody)(nil),
		(*Message_BytesBody)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_service_proto_goTypes,
		DependencyIndexes: file_backend_service_proto_depIdxs,
		MessageInfos:      file_backend_service_proto_msgTypes,
	}.Build()
	File_backend_service_proto = out.File
	file_backend_service_proto_rawDesc = nil
	file_backend_service_proto_goTypes = nil
	file_backend_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BackendServiceClient is the client API for BackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackendServiceClient interface {
	// ===== SYSTEM =====
	Request(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	RequestStream(ctx context.Context, opts ...grpc.CallOption) (BackendService_RequestStreamClient, error)
}

type backendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendServiceClient(cc grpc.ClientConnInterface) BackendServiceClient {
	return &backendServiceClient{cc}
}

func (c *backendServiceClient) Request(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/isp.BackendService/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) RequestStream(ctx context.Context, opts ...grpc.CallOption) (BackendService_RequestStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BackendService_serviceDesc.Streams[0], "/isp.BackendService/RequestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendServiceRequestStreamClient{stream}
	return x, nil
}

type BackendService_RequestStreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type backendServiceRequestStreamClient struct {
	grpc.ClientStream
}

func (x *backendServiceRequestStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *backendServiceRequestStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BackendServiceServer is the server API for BackendService service.
type BackendServiceServer interface {
	// ===== SYSTEM =====
	Request(context.Context, *Message) (*Message, error)
	RequestStream(BackendService_RequestStreamServer) error
}

// UnimplementedBackendServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBackendServiceServer struct {
}

func (*UnimplementedBackendServiceServer) Request(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (*UnimplementedBackendServiceServer) RequestStream(BackendService_RequestStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestStream not implemented")
}

func RegisterBackendServiceServer(s *grpc.Server, srv BackendServiceServer) {
	s.RegisterService(&_BackendService_serviceDesc, srv)
}

func _BackendService_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/isp.BackendService/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).Request(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_RequestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BackendServiceServer).RequestStream(&backendServiceRequestStreamServer{stream})
}

type BackendService_RequestStreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type backendServiceRequestStreamServer struct {
	grpc.ServerStream
}

func (x *backendServiceRequestStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *backendServiceRequestStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BackendService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "isp.BackendService",
	HandlerType: (*BackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _BackendService_Request_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestStream",
			Handler:       _BackendService_RequestStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "backend_service.proto",
}
